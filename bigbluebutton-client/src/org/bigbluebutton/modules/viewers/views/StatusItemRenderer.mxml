<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	creationComplete="onCreationComplete()" > 
	
	<mate:Listener type="ViewVideoCloseEvent" method="onViewVideoCloseEvent"/>
	<mate:Listener type="{ViewersRollEvent.VIEWERS_ROLL_OVER}" method="onRollOver" />
	<mate:Listener type="{ViewersRollEvent.VIEWERS_ROLL_OUT}" method="onRollOut" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.controls.Alert;
			import mx.events.ListEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.Role;
			import org.bigbluebutton.main.api.UserManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.model.users.Conference;
			import org.bigbluebutton.main.model.users.events.KickUserEvent;
			import org.bigbluebutton.main.model.users.events.LowerHandEvent;
			import org.bigbluebutton.modules.viewers.events.ViewCameraEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			[Bindable] public var kickIcon:Class = images.delete_icon;
			
			private var isModerator:Boolean = false;
			private var allowKickUser:Boolean = false;
			[Bindable] private var kickButtonEnabled:Boolean = false;
			
			private function onCreationComplete():void{
				var conf:Conference = UserManager.getInstance().getConference();
				this.isModerator = (conf.me.role == Role.MODERATOR);
				allowKickUser = ViewersModule.allowKickUser;
				
				kickButtonEnabled = this.isModerator && allowKickUser;
				
				this.addEventListener(ListEvent.ITEM_ROLL_OVER, onRollOver);
				this.addEventListener(ListEvent.ITEM_ROLL_OUT, onRollOut);
			}
			
			public function onRollOver(e:ViewersRollEvent):void{
				if (kickButtonEnabled && (e.userid == data.userid)) kickUserBtn.visible = true;
			}
			
			public function onRollOut(e:ViewersRollEvent):void{
				if (kickButtonEnabled && (e.userid == data.userid)) kickUserBtn.visible = false;
			}
			
			private function viewCamera():void {
   				LogUtil.debug("ViewersModule - sending camera view request for stream" + data.streamName);
   				streamIcon.enabled = false;
   				//streamName = data.streamName;
				dispatchEvent(new ViewCameraEvent(data.userid, data.streamName, data.name));
   			}
   			
   			private function onViewVideoCloseEvent(event:BBBEvent):void {
   				LogUtil.debug("ViewWindoClosing event: " + event.message);
   				if (data.streamName == event.message) {
   					streamIcon.enabled = true;
   				}
   			}
   			
   			private function lowerHand():void {
				dispatchEvent(new LowerHandEvent(data.userid));
   			}			
			
			private function kickUser():void{
				if (isModerator){
					dispatchEvent(new KickUserEvent(data.userid));
				}
			}
		
   			[Bindable] private var webcamIcon:Class = images.webcam;
   			[Bindable] private var handIcon:Class = images.raisehand;	
   			[Bindable] private var presenterIcon:Object = images.presenter;
		]]>
	</mx:Script>
	<mx:Button id="raiseHand" visible="{data.raiseHand}" click="lowerHand()" 
				icon="{handIcon}" width="18" height="18"
				toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.viewersGrid.statusItemRenderer.raiseHand.toolTip'), 
				[new Date()]}"/>
	<mx:Button id="streamIcon" visible="{data.hasStream}" click="viewCamera()" icon="{webcamIcon}"
				width="18" height="18" enabled="false"
				toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.viewersGrid.statusItemRenderer.streamIcon.toolTip')}"/>	
	<mx:Image id="presIcon" visible="{data.presenter}" source="{presenterIcon}" toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.viewersGrid.statusItemRenderer.presIcon.toolTip')}"/>

	<mx:Button id="kickUserBtn" icon="{kickIcon}" 
			   width="20" height="20" visible="false"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.kickUserBtn.toolTip')}"
			   click="kickUser()"/>
</mx:HBox>
