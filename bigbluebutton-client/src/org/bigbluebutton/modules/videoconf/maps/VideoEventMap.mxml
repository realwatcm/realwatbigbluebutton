<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.api.UserManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.events.OpenWindowEvent;
			import org.bigbluebutton.main.events.ToolbarButtonEvent;
			import org.bigbluebutton.main.model.users.BBBUser;
			import org.bigbluebutton.main.model.users.events.BroadcastStartedEvent;
			import org.bigbluebutton.main.model.users.events.BroadcastStoppedEvent;
			import org.bigbluebutton.main.model.users.events.StreamStartedEvent;
			import org.bigbluebutton.modules.videoconf.business.VideoProxy;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.modules.videoconf.events.OpenPublishWindowEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.views.PublishWindow;
			import org.bigbluebutton.modules.videoconf.views.ToolbarButton;
			import org.bigbluebutton.modules.videoconf.views.VideoWindow;
			import org.bigbluebutton.modules.viewers.events.ViewCameraEvent;
			import org.flexunit.runner.manipulation.filters.IncludeAllFilter;
			
			public var module:VideoconfModule;
			private var button:ToolbarButton;
			private var publishWindow:PublishWindow;
			public var proxy:VideoProxy;
			
			private function viewCamera(userid:Number, stream:String, name:String, mock:Boolean = false):void{
				if (userid == module.userid) return;
				
				var window:VideoWindow = new VideoWindow();
				
				if (mock) {
					window.startVideo(module.mockConnection, stream);
				}
				else {
					window.startVideo(module.connection, stream);
				}
				window.title = name;
				
				var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
				windowEvent.window = window;
				globalDispatcher.dispatchEvent(windowEvent);
			}

			private function viewVideoFile(e:BBBEvent):void {
				viewCamera(1, e.message, e.message, true);
			}
			
			private function mockConnect():void {
				module.mockConnect();
			}
			
			public function addToolbarButton():void{
				button = new ToolbarButton();	  
				button.isPresenter = !module.presenterShareOnly;
				var event:ToolbarButtonEvent = new ToolbarButtonEvent(ToolbarButtonEvent.ADD);
				event.button = button;
				globalDispatcher.dispatchEvent(event);
			}
			
			private function openPublishWindow():void{
				publishWindow = new PublishWindow();
				publishWindow.streamName = module.userid.toString();
				publishWindow.userrole = module.role;
				publishWindow.quality = module.quality;
				
				var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
				windowEvent.window = publishWindow;
				globalDispatcher.dispatchEvent(windowEvent);
			}
			
			private function startPublishing(e:StartBroadcastEvent):void{
			    LogUtil.debug("Publishing stream to: " + proxy.connection.uri + "/" + e.stream);
				proxy.startPublishing(e);
				var broadcastEvent:BroadcastStartedEvent = new BroadcastStartedEvent();
				broadcastEvent.stream = e.stream;
				broadcastEvent.userid = module.userid;
				globalDispatcher.dispatchEvent(broadcastEvent);
			}
			
			private function stopPublishing(e:StopBroadcastEvent):void{
				proxy.stopBroadcasting();
				
				var broadcastEvent:BroadcastStoppedEvent = new BroadcastStoppedEvent();
				broadcastEvent.stream = publishWindow.streamName;
				broadcastEvent.userid = module.userid;
				globalDispatcher.dispatchEvent(broadcastEvent);
				
				//Make toolbar button enabled again
				button.show();
			}
			
			public function stopModule():void {
				closeAllWindows();
				proxy.disconnect();
			}
			
			public function closeAllWindows():void{
				if (publishWindow != null) {
					proxy.stopBroadcasting();
					publishWindow.close();
				}
				globalDispatcher.dispatchEvent(new CloseAllWindowsEvent());
			}
			
			private function switchToPresenter():void{
				if (module.presenterShareOnly){
					button.isPresenter = true;
				}
			}
			
			private function switchToViewer():void{
				if (module.presenterShareOnly){
					button.isPresenter = false;
					if (publishWindow != null) publishWindow.close();
				}
			}
			
			
		]]>
	</mx:Script>
	
	<EventHandlers type="{OpenPublishWindowEvent.OPEN_PUBLISH_WINDOW}">
		<InlineInvoker method="openPublishWindow" />
	</EventHandlers>
	
	<EventHandlers type="{StartBroadcastEvent.START_BROADCAST}" >
		<InlineInvoker method="startPublishing" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StopBroadcastEvent.STOP_BROADCASTING}" >
		<InlineInvoker method="stopPublishing" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{BBBEvent.START_VIDEO_STREAM}" >
		<InlineInvoker method="viewVideoFile" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{BBBEvent.START_VIDEO_CONNECTION}">
		<InlineInvoker method="mockConnect" />
	</EventHandlers>
	
	<EventHandlers type="{StreamStartedEvent.STREAM_STARTED}">
		<InlineInvoker method="viewCamera" arguments="{[event.userid, event.stream, event.user]}" />
	</EventHandlers>
	
	<EventHandlers type="{ViewCameraEvent.VIEW_CAMERA_EVENT}">
		<InlineInvoker method="viewCamera" arguments="{[event.userid, event.stream, event.viewedName]}" />
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" >
		<InlineInvoker method="switchToPresenter" />	
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
		<InlineInvoker method="switchToViewer" />
	</EventHandlers>
	
</EventMap>
