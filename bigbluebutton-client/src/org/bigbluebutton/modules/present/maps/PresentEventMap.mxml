<?xml version="1.0" encoding="utf-8"?>
<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
			import org.bigbluebutton.modules.present.api.PresentationAPI;
			import org.bigbluebutton.modules.present.business.PresentProxy;
			import org.bigbluebutton.modules.present.events.AddOverlayCanvasEvent;
			import org.bigbluebutton.modules.present.events.PresentModuleEvent;
			import org.bigbluebutton.modules.present.events.PresentationEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.managers.PresentManager;
			import org.bigbluebutton.modules.present.views.PresentationWindow;

			private var apiInstance:PresentationAPI;
			
			private function createAPI():void{
				apiInstance = PresentationAPI.getInstance();
			}
		]]>
	</mx:Script>
	
	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<ObjectBuilder generator="{PresentManager}" cache="global" />
		<ObjectBuilder generator="{PresentProxy}" cache="global" />
		<InlineInvoker method="createAPI" />
	</EventHandlers>
	
	<EventHandlers type="{PresentModuleEvent.START_MODULE}" >
		<MethodInvoker generator="{PresentProxy}" method="connect" arguments="{event}" />
		<MethodInvoker generator="{PresentManager}" method="handleStartModuleEvent" />
	</EventHandlers>
	
	<EventHandlers type="{PresentModuleEvent.STOP_MODULE}" >
		<MethodInvoker generator="{PresentManager}" method="handleStopModuleEvent" />
	</EventHandlers>
	
	<EventHandlers type="{UploadEvent.OPEN_UPLOAD_WINDOW}" >
		<MethodInvoker generator="{PresentManager}" method="handleOpenUploadWindow" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{UploadEvent.CLOSE_UPLOAD_WINDOW}" >
		<MethodInvoker generator="{PresentManager}" method="handleCloseUploadWindow" />
	</EventHandlers>
	
	<EventHandlers type="{RoleChangeEvent.ASSIGN_PRESENTER}" >
		<MethodInvoker generator="{PresentProxy}" method="assignPresenter" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{UploadEvent.START_UPLOAD}">
		<MethodInvoker generator="{PresentProxy}" method="startUpload" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.GOTO_SLIDE}" >
		<MethodInvoker generator="{PresentProxy}" method="gotoSlide" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.RESET_ZOOM}" >
		<MethodInvoker generator="{PresentProxy}" method="resetZoom" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.SHARE_PRESENTATION_COMMAND}">
		<MethodInvoker generator="{PresentProxy}" method="sharePresentation" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.MOVE}" >
		<MethodInvoker generator="{PresentProxy}" method="moveSlide" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.ZOOM}" >
		<MethodInvoker generator="{PresentProxy}" method="zoomSlide" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.SEND_CURSOR_UPDATE}" >
		<MethodInvoker generator="{PresentProxy}" method="sendCursorUpdate" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PresenterCommands.RESIZE}" >
		<MethodInvoker generator="{PresentProxy}" method="resizeSlide" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{UploadEvent.PRESENTATION_READY}" >
		<MethodInvoker generator="{PresentProxy}" method="loadPresentation" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{RemovePresentationEvent.REMOVE_PRESENTATION_EVENT}">
		<MethodInvoker generator="{PresentProxy}" method="removePresentation" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{RemovePresentationEvent.PRESENTATION_REMOVED_EVENT}">
		<MethodInvoker generator="{PresentManager}" method="removePresentation" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{UploadEvent.CONVERT_SUCCESS}">
		<MethodInvoker generator="{PresentManager}" method="updatePresentationNames" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{SlideEvent.LOAD_CURRENT_SLIDE}" >
		<MethodInvoker generator="{PresentProxy}" method="loadCurrentSlideLocally" arguments="{event}" />
	</EventHandlers>
	
	
		
</EventMap>
