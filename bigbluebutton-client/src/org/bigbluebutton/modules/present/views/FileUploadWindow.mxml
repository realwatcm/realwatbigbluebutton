<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
    	title="{ResourceUtil.getInstance().getString('bbb.fileupload.title')}"
    	x="168" y="86" layout="absolute" width="600" height="200"
    	initialize="initData();">
    	
    <mate:Dispatcher id="globalDispatch" />
    <mate:Listener type="{UploadEvent.UPLOAD_PROGRESS_UPDATE}" method="uploadProgressUpdate" />
    <mate:Listener type="{UploadEvent.UPLOAD_COMPLETE}" method="uploadComplete" />
    <mate:Listener type="{UploadEvent.UPLOAD_IO_ERROR}" method="uploadIOError" />
    <mate:Listener type="{UploadEvent.UPLOAD_SECURITY_ERROR}" method="uploadSecurityError" />
    <mate:Listener type="{UploadEvent.CONVERT_ERROR}" method="convertError" />
    <mate:Listener type="{UploadEvent.CONVERT_SUCCESS}" method="convertSuccess" />
    <mate:Listener type="{UploadEvent.CONVERT_UPDATE}" method="convertUpdate" />
    <mate:Listener type="{UploadEvent.UPDATE_PROGRESS}" method="updateProgress" />
    <mate:Listener type="{UploadEvent.THUMBNAILS_UPDATE}" method="handleThumbnailsProgressEvent" />
	<mate:Listener type="{UploadEvent.OFFICE_DOC_CONVERSION_FAILED}" method="handleOfficeDocumentConversionFailed"/>
	<mate:Listener type="{UploadEvent.OFFICE_DOC_CONVERSION_SUCCESS}" method="handleOfficeDocumentConversionSuccess"/>
	<mate:Listener type="{UploadEvent.SUPPORTED_DOCUMENT}" method="handleSupportedDocument"/>	
	<mate:Listener type="{UploadEvent.UNSUPPORTED_DOCUMENT}" method="handleUnsupportedDocument"/>
	<mate:Listener type="{UploadEvent.PAGE_COUNT_FAILED}" method="handlePageCountFailed"/>
	<mate:Listener type="{UploadEvent.PAGE_COUNT_EXCEEDED}" method="handlePageCountExceeded"/>
    	    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.common.LogUtil;
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.collections.*;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.validators.*;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

            	
			[Bindable] public var presentationNames:Array = new Array();
			[Bindable] public var presentationNamesAC:ArrayCollection;
			
			private var images:Images = new Images();
			[Bindable] private var addIcon : Class = images.add;
			[Bindable] private var bulletGoIcon : Class = images.bulletGo;
			[Bindable] private var deleteIcon : Class = images.delete_icon;
	        
	        private var thumbnailTimer:Timer = new Timer(5000);
	        private var genThumbText:String = ResourceUtil.getInstance().getString('bbb.fileupload.genThumbText');
	        private var genThumbDots:String = ".";
	        
	        private var fileToUpload:FileReference = new FileReference();

	        private function initData():void {
    	        presentationNamesAC = new ArrayCollection(presentationNames);
    	        if (presentationNames.length <= 0) {
					deleteBtn.enabled = false;
					showBtn.enabled = false;
					selectFile();
    	        }
            }			
            
	        private function showPresentation():void {
				LogUtil.debug("FileUploadWindow::showPresentation() " + this.presentationNamesCombobox.selectedLabel);   
				var readyEvent:UploadEvent = new UploadEvent(UploadEvent.PRESENTATION_READY);
				readyEvent.presentationName = this.presentationNamesCombobox.selectedLabel;
				globalDispatch.dispatchEvent(readyEvent);
				
				dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
			}			
            
	        private function deletePresentation():void {
				LogUtil.debug("FileUploadWindow.mxml::deletePresentation() " + this.presentationNamesCombobox.selectedIndex);
				presentationNamesAC.removeItemAt(presentationNamesCombobox.selectedIndex);
				if (presentationNamesAC.length == 0) {
					showBtn.enabled = false;
					deleteBtn.enabled = false;
				}
				
				var rEvent:RemovePresentationEvent = new RemovePresentationEvent(RemovePresentationEvent.REMOVE_PRESENTATION_EVENT);
				rEvent.presentationName = presentationNamesCombobox.selectedLabel;
				dispatchEvent(rEvent);
			}					
			
			private function handleThumbnailsProgressEvent(event:Event):void {	
				genThumbDots = ".";

            	thumbnailTimer.repeatCount = 20;
            	thumbnailTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            	thumbnailTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);           
            	thumbnailTimer.start();				
			}
			
			private function handleConvertSuccessEvent(event:Event):void {
				thumbnailTimer.stop();
			}
			
			private function timerHandler(e:TimerEvent):void{
            	displayGeneratingThumbnailsMessage();
        	}

        	private function completeHandler(e:TimerEvent):void {
            	 displayGeneratingThumbnailsMessage();
            	 thumbnailTimer.stop();
        	}
        	
        	private function displayGeneratingThumbnailsMessage():void {
        		genThumbDots += ".";
        		progressLbl.text = genThumbText + genThumbDots;
				progressBar.label = genThumbText + genThumbDots;
        	}
        	
        	private function selectFile():void{
        		fileToUpload.addEventListener(Event.SELECT, onSelectFile);	
				fileToUpload.browse([
						new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.presentationfile'), "*.pdf;*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx;*.txt;*.rtf;*.odt;*.ods;*.odp;*.odg;*.odc;*.odi;*.jpg;*.png"), 
						new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.pdf'), "*.pdf"),
						new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.word'), "*.doc;*.docx;*.odt;*.rtf;*.txt"), 
						new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.excel'), "*.xls;*.xlsx;*.ods"),
						new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.powerpoint'), "*.ppt;*.pptx;*.odp"),
						new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.image'), "*.jpg;*.jpeg;*.png")]);
        	}
        	
        	private function onSelectFile(e:Event):void{
        		fileTxtInput.text = fileToUpload.name;
        		uploadBtn.enabled = true;
        	}
        	
        	private function startUpload():void {
        		var fileSize:Number = fileToUpload.size;
				var maxFileSize:Number = 30000000;
				
        		if (fileSize > maxFileSize) {     
        			// Hardcode for now to 30M limit. 
        			// This should be configurable to match what's allowed in nginx. (ralam feb 23, 2010) 
        			LogUtil.error("File exceeds max limit:(" + fileSize + ">" + maxFileSize + ")");  			
        			enableControls();
					displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.maxUploadFileExceededAlert'));
        		} else {
        			var presentationName:String = fileToUpload.name
	        		LogUtil.debug("Uploading file : " + presentationName);
	        		
					var filenamePattern:RegExp = /(.+)(\..+)/i;
					// Get the first match which should be the filename without the extension.
					presentationName = presentationName.replace(filenamePattern, "$1")
					// Replace any character other than a word character (A-Z, a-z, 0-9, or _).
					presentationName = presentationName.replace(/[^0-9a-zA-Z_\.]/g, "-");
					LogUtil.debug("Uploadling presentation name: " + presentationName);
					
					var uploadEvent:UploadEvent = new UploadEvent(UploadEvent.START_UPLOAD);
					uploadEvent.presentationName = presentationName;
					uploadEvent.fileToUpload = fileToUpload;
					globalDispatch.dispatchEvent(uploadEvent);
					
					progBarLbl.visible = true;
					progressBar.visible = true;
					
					okCancelBtn.visible = false;
					selectBtn.enabled = false;
					uploadBtn.enabled = false;
					fileTxtInput.enabled = false;
					
					presentationNamesLb.visible = false;
					presentationNamesCombobox.visible = false;
					deleteBtn.visible = false;
					showBtn.visible = false;
        		}
        		
        	}
        	
        	private function uploadProgressUpdate(e:UploadEvent):void{
        		var progress:Number = e.percentageComplete;
				progressLbl.text = progress + "% " + ResourceUtil.getInstance().getString('bbb.presentation.uploaded');
				progressBar.label = progress + "% " + ResourceUtil.getInstance().getString('bbb.presentation.uploaded');
				progressBar.setProgress(progress, 100);
				progressBar.validateNow();
				progressLbl.validateNow();
        	}
        	
        	private function uploadComplete(e:UploadEvent):void{
        		progressLbl.text = ResourceUtil.getInstance().getString('bbb.presentation.uploadcomplete')
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.uploadsuccessful');
				progressBar.setProgress(0, 100);
				progressBar.validateNow();
				progressLbl.validateNow();
	
				fileLbl.visible = false;
				selectBtn.visible = false;
				uploadBtn.visible = false;
				fileTxtInput.visible = false;
        	}

			private function handleOfficeDocumentConversionFailed(e:UploadEvent):void {
				enableControls();
				displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.document.convert.failed'));
			}   
			
			private function handleOfficeDocumentConversionSuccess(e:UploadEvent):void {
				progressLbl.text = ResourceUtil.getInstance().getString('bbb.presentation.document.converted')
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.document.converted');
				progressBar.setProgress(0, 100);
				progressBar.validateNow();
				progressLbl.validateNow();
			}
			
			private function handleSupportedDocument(e:UploadEvent):void {
				LogUtil.debug("handleSupportedDocument");
				progressLbl.text = ResourceUtil.getInstance().getString('bbb.presentation.document.supported')
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.document.supported');
				progressBar.setProgress(0, 100);
				progressBar.validateNow();
				progressLbl.validateNow();
			}
			
			private function handleUnsupportedDocument(e:UploadEvent):void {
				enableControls();
				displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.notsupported'));
			}
			
			private function handlePageCountFailed(e:UploadEvent):void {
				enableControls();
				displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.nbpage'));
			}
			
			private function handlePageCountExceeded(e:UploadEvent):void {
				LogUtil.debug("handlePageCountExceeded");
				enableControls();
				var message:String = " Maximum supported is " + e.maximumSupportedNumberOfSlides;
				displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.maxnbpagereach'), message);
			}
			     	
        	private function uploadIOError(e:UploadEvent):void{
        		enableControls();
        		displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.io'));
        	}
        	
        	private function uploadSecurityError(e:UploadEvent):void{
        		enableControls();
				displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.security'));
        	}
        	
        	private function displayAlert(error:String, message:String = null):void {
        		var okLabel:String = ResourceUtil.getInstance().getString('bbb.presentation.ok');        	
				progressBar.setStyle("color", 0xFF0000);
				progressLbl.setStyle("color", 0xFF0000);
        		progressBar.label = error + message;
				progressLbl.text = ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.closeLabel');
				okCancelBtn.label = "Ok";

        	}
        	
			private function enableControls():void {
				okCancelBtn.visible = true;
				selectBtn.enabled = true;
				uploadBtn.enabled = true;
				fileTxtInput.enabled = true;			
			}

			private function convertUpdate(e:UploadEvent):void{
				progressLbl.text = ResourceUtil.getInstance().getString('bbb.presentation.converted',[e.completedSlides, e.totalSlides]);
				progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.converted',[e.completedSlides, e.totalSlides]);
				progressBar.setProgress(e.completedSlides, e.totalSlides);
				progressBar.validateNow();
				progressLbl.validateNow();
			}

			private function convertError(e:UploadEvent):void{
				enableControls();
				okCancelBtn.label = "Ok";
				okCancelBtn.visible = true;
				globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
			}

		private function convertSuccess(e:UploadEvent):void{
			okCancelBtn.label = ResourceUtil.getInstance().getString('bbb.presentation.ok');
			okCancelBtn.visible = true;
			var readyEvent:UploadEvent = new UploadEvent(UploadEvent.PRESENTATION_READY);
			readyEvent.presentationName = e.presentationName;
			globalDispatch.dispatchEvent(readyEvent);
			globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
		}

		//Unlike UploadProgress, this event comes from the PresentSOService, not the UploadService
		private function updateProgress(e:UploadEvent):void{
			progressLbl.text = e.data as String;
			progressLbl.validateNow();
		}

	]]>
		
	</mx:Script>
    
    <!-- NOTE: Need to redo this layout to handle localization better -->       
	<mx:Spacer height="100%" x="0" y="0"/>	
	<mx:Label id="fileLbl" text="{ResourceUtil.getInstance().getString('bbb.fileupload.fileLbl')}" x="30" y="11"/>
	<mx:TextInput id="fileTxtInput" width="328" x="87" y="9" editable="false"/>
	<mx:Button id="selectBtn" toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.toolTip')}" 
		click="selectFile()" icon="{addIcon}" width="26" x="432" y="9"/>
	<mx:Button id="uploadBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn')}" 
		toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn.toolTip')}"  click="startUpload()"
		enabled="false" icon="{bulletGoIcon}" x="466" y="9"/>

	<mx:Label id="progBarLbl" text="{ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl')}" x="21" y="75" visible="false"/>
	<mx:ProgressBar id="progressBar" mode="manual" label="" labelPlacement="center" width="460" y="75" x="87" visible="false"/>
	
	<mx:Label id="presentationNamesLb" text="{ResourceUtil.getInstance().getString('bbb.fileupload.presentationNamesLbl')}" x="50" y="40"/>
    <mx:ComboBox id="presentationNamesCombobox" width="365" x="50" y="66" dataProvider="{presentationNamesAC}"/> 
	<mx:Button id="deleteBtn" label="" toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.deleteBtn.toolTip')}"  
		click="deletePresentation()" enabled="true"	icon="{deleteIcon}" width="26" x="432" y="66"/>
	<mx:Button id="showBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.showBtn')}" toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.showBtn.toolTip')}"  
		click="showPresentation()" enabled="true" icon="{bulletGoIcon}" x="466" y="66"/>
	
	<mx:ControlBar horizontalAlign="center" verticalAlign="middle" x="0" y="106">
		<mx:Label id="progressLbl" text="" width="100%"/>
		<mx:Spacer width="100%"/>
		<mx:Button id="okCancelBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.okCancelBtn')}" 
			click="globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW))"/>
	</mx:ControlBar>	
</mx:TitleWindow> 