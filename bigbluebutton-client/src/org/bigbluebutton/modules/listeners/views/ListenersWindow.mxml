<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns="flexlib.mdi.containers.*"
			implements="org.bigbluebutton.common.IBbbModuleWindow"
			title="{windowTitle}"
			creationComplete="onCreationComplete()" xmlns:mate="http://mate.asfusion.com/">
	
	<mate:Listener type="{ListenersEvent.FIRST_LISTENER_JOINED_EVENT}" method="firstListenerJoined" />
	<mate:Listener type="{ListenersEvent.ROOM_MUTE_STATE}" method="roomMuteStateChange" />
	<mate:Listener type="{ListenersEvent.REGISTER_LISTENERS}" method="registerListeners" />
	<mate:Listener type="{ListenersEvent.SET_LOCAL_MODERATOR_STATUS}" method="{setModerator}" />
	
	<mx:Script>
		<![CDATA[
			import flash.events.MouseEvent;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.events.ListEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.listeners.events.ListenersCommand;
			import org.bigbluebutton.modules.listeners.events.ListenersEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images= new Images();
			
			private var _xPosition:int;
			private var _yPosition:int;
 			  			
			[Bindable] private var muteAllIcon:Class = images.sound_mute; 
			[Bindable] private var unmuteAllIcon:Class = images.sound_none;
			[Bindable] private var kickIcon:Class = images.eject_user;
			[Bindable] public var listeners:ArrayCollection = new ArrayCollection();
			[Bindable] public var moderator:Boolean;
			[Bindable] private var windowTitle:String = ResourceUtil.getInstance().getString('bbb.listeners.title', ["",""]);
			
			
			private function onCreationComplete():void {
				BindingUtils.bindSetter(updateNumberOfListeners, listeners, "length");				
			}
			
			private function updateNumberOfListeners(numListeners:int):void {
				if (numListeners > 4)
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', [":", numListeners]) ;
				else 
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', ["", ""]) ;
			}
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.BOTTOM_LEFT;
			}
			
			public function setMuteState(mute:Boolean):void{
				if (mute){
					muteAllBtn.toolTip = ResourceUtil.getInstance().getString('bbb.listeners.unmuteAllBtn.toolTip');
					muteAllBtn.selected = true;
				} else{
					muteAllBtn.toolTip = ResourceUtil.getInstance().getString('bbb.listeners.muteAllBtn.toolTip');
					muteAllBtn.selected = false;
				}
			}
			
			private function toggleMuteState():void{
				if (muteAllBtn.selected) muteAllListeners();
				else if (!muteAllBtn.selected) unmuteAllListeners();
				setMuteState(muteAllBtn.selected);
			}
			
			private function muteAllListeners():void{
				var muteCommand:ListenersCommand = new ListenersCommand(ListenersCommand.MUTE_ALL);
				dispatchEvent(muteCommand);
			}
			
			private function unmuteAllListeners():void{
				var unmuteCommand:ListenersCommand = new ListenersCommand(ListenersCommand.UNMUTE_ALL);
				dispatchEvent(unmuteCommand);
			}
			
			private function firstListenerJoined(e:ListenersEvent):void{
				
			}
			
			private function roomMuteStateChange(e:ListenersEvent):void{
				setMuteState(e.mute_state);
			}
			
			private function registerListeners(e:ListenersEvent):void{
				this.listeners = e.listeners.listeners;
			}
			
			private function setModerator(e:ListenersEvent):void{
				moderator = e.moderator;
				showCloseButton = false;
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				if (listeners.length > 4)
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', [":", listeners.length]) ;
				else 
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', ["", ""]) ;
			}
			
			private function onItemRollOver(e:ListEvent):void{
				var item:ListenerItem = e.itemRenderer as ListenerItem;
				item.onRollOver();
			}
			
			private function onItemRollOut(e:ListEvent):void{
				var item:ListenerItem = e.itemRenderer as ListenerItem;
				item.onRollOut();
			}
		]]>
	</mx:Script>
    	<mx:List id="listenersList" height="100%" width="100%"
 			itemRenderer="org.bigbluebutton.modules.listeners.views.ListenerItem" 
            dragEnabled="false" dataProvider="{listeners}"
			itemRollOver="onItemRollOver(event)"
			itemRollOut="onItemRollOut(event)">          
    	</mx:List>				
    	    	
    	<mx:ControlBar width="100%">
    	    <mx:Button id="muteAllBtn" icon="{muteAllIcon}" visible="{moderator}" toggle="true" selected="false"
    	   			toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.muteAllBtn.toolTip')}" 
    	   			click="toggleMuteState()" width="18" height="18"/>         	   
     	   <mx:Spacer width="100%"/>
    	</mx:ControlBar>

</MDIWindow>
