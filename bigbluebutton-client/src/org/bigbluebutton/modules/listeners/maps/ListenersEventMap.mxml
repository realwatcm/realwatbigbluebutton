<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/" >
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.bigbluebutton.modules.listeners.business.ListenersProxy;
			import org.bigbluebutton.modules.listeners.events.ListenersCommand;
			import org.bigbluebutton.modules.listeners.events.StartListenersModuleEvent;
			import org.bigbluebutton.modules.listeners.events.StopListenersModuleEvent;
			import org.bigbluebutton.modules.listeners.managers.ListenersManager;
		]]>
	</mx:Script>
	
	
	<EventHandlers type="{FlexEvent.PREINITIALIZE}" >
		<ObjectBuilder cache="global" generator="{ListenersProxy}" />
		<ObjectBuilder cache="global" generator="{ListenersManager}" /> 
	</EventHandlers>
	
	<EventHandlers type="{StartListenersModuleEvent.START_LISTENERS_MODULE}" >
		<MethodInvoker generator="{ListenersManager}" method="moduleStarted" arguments="{event}" />
		<MethodInvoker generator="{ListenersProxy}" method="connect" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StopListenersModuleEvent.STOP_LISTENERS_MODULE}" >
		<MethodInvoker generator="{ListenersProxy}" method="disconnect" />
		<MethodInvoker generator="{ListenersManager}" method="moduleEnded" />
	</EventHandlers>
	
	<EventHandlers type="{ListenersCommand.EJECT_USER}" >
		<MethodInvoker generator="{ListenersProxy}" method="ejectUser" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{ListenersCommand.MUTE_USER}" >
		<MethodInvoker generator="{ListenersProxy}" method="muteUnmuteUser" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{ListenersCommand.LOCK_MUTE_USER}" >
		<MethodInvoker generator="{ListenersProxy}" method="lockMuteUser" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{ListenersCommand.MUTE_ALL}" >
		<MethodInvoker generator="{ListenersProxy}" method="muteAllUsers" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{ListenersCommand.UNMUTE_ALL}" >
		<MethodInvoker generator="{ListenersProxy}" method="unmuteAllUsers" arguments="{event}" />
	</EventHandlers>
	
</EventMap>
