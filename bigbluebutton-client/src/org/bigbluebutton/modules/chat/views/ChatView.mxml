<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:mate="http://mate.asfusion.com/"
		 creationComplete="onCreationComplete()"
		 xmlns:flexlib="http://code.google.com/p/flexlib/"
		 width="100%" height="100%" xmlns:containers="flexlib.containers.*"
		 implements="org.bigbluebutton.main.api.IUserListener"
		 verticalScrollPolicy="off">
	
	<mate:Listener type="{PrivateChatMessageEvent.PRIVATE_CHAT_MESSAGE_EVENT}" method="handlePrivateChatMessageEvent"/>
	<mate:Listener type="{PublicChatMessageEvent.PUBLIC_CHAT_MESSAGE_EVENT}" method="handlePublicChatMessageEvent"/>
	<mate:Listener type="{BBBEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT}" method="sendMessageReceivedFromBBBEvent"/> 
	<mate:Listener type="{ChatOptionsEvent.CHANGE_FONT_SIZE}" method="changeFontSize" />
	<mate:Listener type="{ChatOptionsEvent.CHANGE_LANGUAGE}" method="changeLanguage" />
	<mate:Listener type="{ChatOptionsEvent.TOGGLE_TRANSLATE}" method="toggleTranslation" />
	
	<mx:Style>
		.colorPickerStyle {
			backgroundColor:#E5E6E7;
			columnCount:12;
			horizontalGap:0;
			previewHeight:22;
			previewWidth:45;
			swatchGridBackgroundColor:#000000;
			swatchGridBorderSize:0;
			swatchHeight:60;
			swatchHighlightColor:#FFFFFF;
			swatchHighlightSize:1;
			swatchWidth:12;
			textFieldWidth:72;
			verticalGap:0;
		}
		
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import be.boulevart.google.ajaxapi.translation.GoogleTranslation;
			import be.boulevart.google.events.GoogleApiEvent;
			
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.external.ExternalInterface;
			
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.SuperTabEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.Container;
			import mx.core.UIComponent;
			import mx.events.IndexChangedEvent;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.api.IUserListener;
			import org.bigbluebutton.main.api.UserManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ParticipantJoinEvent;
			import org.bigbluebutton.main.model.User;
			import org.bigbluebutton.modules.chat.events.ChatOptionsEvent;
			import org.bigbluebutton.modules.chat.events.PrivateChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.PublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.QueryParticipantsEvent;
			import org.bigbluebutton.modules.chat.events.SendPrivateChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.SendPublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.model.MessageVO;
			import org.bigbluebutton.modules.chat.model.business.UserVO;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] private var colorPickerColours:Array = ['0x000000', '0x7A7A7A' ,'0xFF0000', '0xFF8800',
				'0x88FF00', '0x00FF00', '0x00FF88', '0x00FFFF', 
				'0x0088FF', '0x0000FF', '0x8800FF', '0xFF00FF'];
			
			private static const PUBLIC_CHAT_USERID:String = '0';
			private static const PUBLIC_CHAT_USERNAME:String = ResourceUtil.getInstance().getString("bbb.chat.publicChatUsername");
			
			private static const TAB_BOX_ID:String = '+';
			private var tabBox:AddChatTabBox;
			
			private var focus:Boolean = true;
			
			private var globalDispatcher:Dispatcher = new Dispatcher();
			
			private var autoTranslation:Boolean=false;
			private var currentLangCode:String="en";
			
			[Bindable]
			public var participants:ArrayCollection = new ArrayCollection();
			
			private function onCreationComplete():void{
				addParticipantToList(PUBLIC_CHAT_USERID, PUBLIC_CHAT_USERNAME, "public");
				openChatBoxFor(PUBLIC_CHAT_USERID);
				createAddTabBox();
				makePublicChatUncloseable();
				addEventListener(SuperTabEvent.TAB_CLOSE, onUserClosedTab);
				systemManager.stage.addEventListener(Event.MOUSE_LEAVE, mouseLeave);
				systemManager.stage.addEventListener(Event.ACTIVATE, activate);
				systemManager.stage.addEventListener(Event.DEACTIVATE, deactivate);
				
				UserManager.getInstance().registerListener(this);
			}       
			
			private function setColor():void{
				var r:int = Math.round(Math.random()*12);
				cmpColorPicker.selectedIndex = r;
			}
			
			private function mouseLeave(event:Event):void{
				this.focus = false;
			}
			
			private function activate(event:Event):void{
				ExternalInterface.call("clearblink");
				this.focus = true;
			}
			
			private function deactivate(event:Event):void{
				this.focus = false;
			}
			
			private function sendMessageReceivedFromBBBEvent(event:BBBEvent):void {
				txtMsg.text = event.message;
				sendMessages();
			}
			
			private function makePublicChatUncloseable():void {
				// See definition of callLater on Adobe Flash doc.
				callLater(calledOnTheNextScreenRefresh);
			}
			
			private function calledOnTheNextScreenRefresh():void {
				var chatBox:ChatBox = getChatBoxForParticipant(PUBLIC_CHAT_USERID);
				var chatIndex:int = getTabIndexFor(chatBox);
				chatTabs.setClosePolicyForTab(chatIndex, SuperTab.CLOSE_NEVER);
				
				chatTabs.setClosePolicyForTab(chatTabs.getChildIndex(tabBox), SuperTab.CLOSE_NEVER);
			}
			
			public function setFocusOn(component:UIComponent):void {
				if (component.id == "txtMsg") {
					component.setFocus();
					component.drawFocus(true);
				}
				else {
					this.txtMsg.setFocus();
					this.txtMsg.drawFocus(true);
				}
			}
			
			public function setFocusOff():void {
				this.txtMsg.drawFocus(false);
			}
			
			private function currentTime() : String {
				return ChatBox.getHours() + ":" + ChatBox.getMinutes();
			}
			
			private function sendMessages():void {
				if (hasMessageToSend()){				
					if (isChatBoxCurrentlySelected(PUBLIC_CHAT_USERID)) {						
						sendPublicChatMessage();
					} else{						
						sendPrivateChatMessage();
					}
					clearMessageEntryTextBox();
				}
			}			
			
			private function hasMessageToSend():Boolean {
				return txtMsg.text != "";
			}
			
			private function clearMessageEntryTextBox():void {
				txtMsg.text = "";
			}
			
			private function cleanup(message:String):String{
				var parsedString:String = message.replace('<', '&#60;')
				parsedString = parsedString.replace('>', '&#62;')
				
				return parsedString;
			}
			
			private function parseURLs(message:String):String{
				var indexOfHTTP:Number = message.indexOf("http://");
				var indexOfWWW:Number = message.indexOf("www.");
				if (indexOfHTTP == -1 && indexOfWWW == -1) return message;
				
				var words:Array = message.split(" ");
				var parsedString:String = "";
				
				for (var n:Number = 0; n<words.length; n++){
					var word:String = words[n] as String;
					if (word.indexOf("http://") != -1) parsedString += '<a href="event:' + word + '"> <u>' + word + '</u></a> ';
					else if (word.indexOf("www.") != -1) parsedString += '<a href="event:http://' + word + '"> <u>' + word + '</u></a> ';
					else parsedString += word + ' ';
				}
				return parsedString;
			}
			
			private function sendPublicChatMessage():void {
				var publicEvent:SendPublicChatMessageEvent = new SendPublicChatMessageEvent(SendPublicChatMessageEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT);
				publicEvent.message = parseURLs(cleanup(txtMsg.text));
				publicEvent.color = cmpColorPicker.selectedColor.toString();
				publicEvent.time = currentTime();
				publicEvent.language = currentLangCode;
				globalDispatcher.dispatchEvent(publicEvent);
			}
			
			private function queryForParticipants():void {
				var event:QueryParticipantsEvent = new QueryParticipantsEvent(QueryParticipantsEvent.QUERY_PARTICIPANTS_EVENT);
				globalDispatcher.dispatchEvent(event);
			}
			
			private function sendPrivateChatMessage():void {
				var privateEvent:SendPrivateChatMessageEvent = new SendPrivateChatMessageEvent(SendPrivateChatMessageEvent.SEND_PRIVATE_CHAT_MESSAGE_EVENT);
				privateEvent.message = parseURLs(cleanup(txtMsg.text));
				privateEvent.toUser = chatTabs.selectedChild.name;
				privateEvent.color = cmpColorPicker.selectedColor.toString();
				privateEvent.time = currentTime();
				privateEvent.language = currentLangCode;
				globalDispatcher.dispatchEvent(privateEvent);
			}
			
			private function isChatBoxCurrentlySelected(id:String):Boolean {
				if (chatTabs.getChildByName(id) == chatTabs.selectedChild){
					return true;
				}
				return false;
			}
			
			private function addParticipantToList(userid:String, name:String, role:String):void {
				var item:Object = new Object();
				item.label = name;
				item.userid = userid;
				item.role = role;
				participants.addItem(item);
			}
			
			private function removeParticipantFromList(userid:String):void {
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).userid == userid) {
						participants.removeItemAt(i);
						updateChatBoxThatParticipantHasLeft(userid);
					}
				}
			}
			
			private function updateChatBoxThatParticipantHasLeft(userid:String):void {
				if (participantHasChatBox(userid)) {
					var chatBox:ChatBox = getChatBoxForParticipant(userid);
					chatBox.participantLoggedOut = true;
					
					if (isChatBoxCurrentlySelected(userid)) {
						disableMessageEntryTextBox();
					}
				}
			}
			
			private function notifyParticipantOfUnreadMessageFrom(userid:String):void {
				var chatBox:ChatBox = getChatBoxForParticipant(userid);
				var tabIndex:int = getTabIndexFor(chatBox);
				var tab:Button = chatTabs.getTabAt(tabIndex);
				tab.setStyle("fillColors", new Array(0xFFAE00, 0xD3800A));
				tab.setStyle("fillAlphas", new Array(1.0, 0.8));
			}
			
			private function getTabIndexFor(chatBox:ChatBox):int {
				return chatTabs.getChildIndex(chatBox);
			}
			
			private function onTabNavChange():void{
				var tab:Button = chatTabs.getTabAt(chatTabs.selectedIndex);
				tab.setStyle("fillColors", new Array(0xFFFFFF, 0xCCCCCC));
				
				if (chatTabs.selectedIndex == chatTabs.numChildren-1) {
					openAddChatTabBox();
					return;
				}
				
				txtMsg.enabled = true;
				var chatBox:ChatBox = chatTabs.getChildAt(chatTabs.selectedIndex) as ChatBox;
				if (chatBox.participantLoggedOut) {
					disableMessageEntryTextBox();
				} else {
					enableMessageEntryTextBox();
				}				
			}
			
			private function openAddChatTabBox():void{
				txtMsg.enabled = false;
			}
			
			private function getParticipantName(userid:String):String{
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).userid == userid) return participants.getItemAt(i).label;
				}
				return "unknown user";
			}
			
			public function openChatBoxFor(userid:String):void {
				LogUtil.debug("Opening chat box " + userid);
				var chatBox:ChatBox;
				
				if (participantHasChatBox(userid)) {
					chatBox = getChatBoxForParticipant(userid);
				} else {
					chatBox = createChatBoxFor(userid);
				}
				
			}
			
			private function createChatBoxFor(userid:String):ChatBox {				
				var chatBox:ChatBox = new ChatBox();
				chatBox.id = getParticipantName(userid);
				chatBox.label = getParticipantName(userid);
				chatBox.name = userid;
				if (chatTabs.numChildren >= 2) chatTabs.addChildAt(chatBox, chatTabs.numChildren - 1);
				else chatTabs.addChild(chatBox);
				
				return chatBox;
			}
			
			private function createAddTabBox():AddChatTabBox{
				tabBox = new AddChatTabBox();
				tabBox.chatView = this;
				tabBox.id = TAB_BOX_ID;
				tabBox.label = TAB_BOX_ID;
				tabBox.name = TAB_BOX_ID;
				chatTabs.addChild(tabBox);
				
				return tabBox;
			}
			
			private function handlePublicChatMessageEvent(event:PublicChatMessageEvent):void {
				LogUtil.debug("Got PublicChatMessageEvent");
				showMessage(PUBLIC_CHAT_USERID, event.message, autoTranslation);
				if (!this.focus)
					ExternalInterface.call("startblink", ResourceUtil.getInstance().getString('bbb.chat.publicMsgAwaiting'), ResourceUtil.getInstance().getString('bbb.chat.publicMsgAwaiting2'));
				globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.RECEIVED_PUBLIC_CHAT_MESSAGE_EVENT, event.message));
			}
			
			private function handlePrivateChatMessageEvent(event:PrivateChatMessageEvent):void {
				LogUtil.debug("Got PrivateChatMessageEvent");
				if (!this.focus)
					ExternalInterface.call("startblink", ResourceUtil.getInstance().getString('bbb.chat.privateMsgAwaiting'), ResourceUtil.getInstance().getString('bbb.chat.privateMsgAwaiting2'));
				showMessage(event.message.sender, event.message.message, autoTranslation);
			}
			
			private function participantHasChatBox(id:String):Boolean {
				var chatBox:ChatBox = chatTabs.getChildByName(id) as ChatBox;
				if (chatBox != null) return true;
				return false;
			}
			
			private function getChatBoxForParticipant(id:String):ChatBox {
				return chatTabs.getChildByName(id) as ChatBox;
			}
			
			private function showMessage(sender:String, message:String, translate:Boolean):void{
				var chatBox:ChatBox;
				if (! participantHasChatBox(sender)) {
					chatBox = createChatBoxFor(sender);
				}
				
				chatBox = getChatBoxForParticipant(sender);
				chatBox.showNewMessage(message, translate, currentLangCode);
				
				if (! isChatBoxCurrentlySelected(sender)) {
					notifyParticipantOfUnreadMessageFrom(sender);
				}				
			}
			
			public function changeFontSize(e:ChatOptionsEvent):void{
				txtMsg.setStyle("fontSize", e.fontSize);
			}
			
			private function onTabClose(e:SuperTabEvent):void{
				dispatchEvent(e);
			}
			
			private function onUserClosedTab(e:SuperTabEvent):void{
				var name:String = chatTabs.getChildAt(e.tabIndex).name;
			}
			
			private function enableMessageEntryTextBox():void {
				txtMsg.enabled = true;
			}
			
			private function disableMessageEntryTextBox():void {
				txtMsg.enabled = false;
			}
			
			/** Inherited from IUserListener */
			public function presenterChanged(newPresenter:User):void{
				
			}
			
			public function userJoined(user:User):void{
				addParticipantToList(user.userid, user.name, user.role);
			}
			
			public function userLeft(user:User):void{
				removeParticipantFromList(user.userid);
				//showMessage(PUBLIC_CHAT_USERID, "<b>" +  event.participant.name + " has left the conference </b>");
			}
			/** end IUserListener methods */
			
			private function toggleTranslation(e:ChatOptionsEvent):void
			{
				this.autoTranslation = e.translateOn;
			}
			
			private function changeLanguage(e:ChatOptionsEvent):void
			{
				this.currentLangCode= e.language;
			}
			
		]]>
	</mx:Script>
	<containers:SuperTabNavigator id="chatTabs" width="100%" height="100%" change="onTabNavChange()" tabClose="onTabClose(event)" minTabWidth="20" 
								  dragEnabled="false" popUpButtonPolicy="off"/>
	
	<mx:ApplicationControlBar id="chatCtrlBar" width="100%" height="10%">		
		<mx:TextInput id="txtMsg" width="100%" enter="sendMessages()" color="{cmpColorPicker.selectedColor}"/>
		<mx:ColorPicker id="cmpColorPicker" showTextField="false" toolTip="{ResourceUtil.getInstance().getString('bbb.chat.cmpColorPicker.toolTip')}" 
						selectedColor="0x000000" dataProvider="{colorPickerColours}" swatchPanelStyleName="colorPickerStyle"/>
		<mx:Button label="{ResourceUtil.getInstance().getString('bbb.chat.sendBtn')}" id="sendBtn" 
				   toolTip="{ResourceUtil.getInstance().getString('bbb.chat.sendBtn.toolTip')}" click="sendMessages()"/> 
	</mx:ApplicationControlBar>	
</mx:VBox>
