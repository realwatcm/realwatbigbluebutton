<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:VBox xmlns="flexlib.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/" visible="false" backgroundColor="0xCCCCCC" cornerRadius="5" borderStyle="solid" 
	paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3" >
	
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="presenterMode" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="viewerMode" />
	<mate:Listener type="{WhiteboardButtonEvent.DISABLE_WHITEBOARD}" method="disableWhiteboard" />
	<mate:Listener type="{WhiteboardButtonEvent.ENABLE_WHITEBOARD}" method="enableWhiteboard" />
	<mate:Listener type="{StopWhiteboardModuleEvent.STOP_HIGHLIGHTER_MODULE_EVENT}" method="closeToolbar" />
	<mate:Listener type="{WhiteboardButtonEvent.CHANGE_TO_PENCIL}" method="setShapeToPencil" />
	
	<mx:Style>
		.colorPickerStyle {
	      backgroundColor:#E5E6E7;
	      columnCount:12;
	      horizontalGap:0;
	      previewHeight:22;
	      previewWidth:45;
	      swatchGridBackgroundColor:#000000;
	      swatchGridBorderSize:0;
	      swatchHeight:60;
	      swatchHighlightColor:#FFFFFF;
	      swatchHighlightSize:1;
	      swatchWidth:12;
	      textFieldWidth:72;
	      verticalGap:0;
	   }

	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObject;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardPresenterEvent;
			import org.bigbluebutton.modules.whiteboard.events.StopWhiteboardModuleEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.present.events.PresentationEvent;
			import org.bigbluebutton.modules.present.views.PresentationWindow;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			[Bindable] private var undo_icon:Class = images.undo_icon;
			[Bindable] private var delete_icon:Class = images.delete_icon;
			[Bindable] private var rectangle_icon:Class = images.square_icon;
			[Bindable] private var ellipse_icon:Class = images.circle_icon;
			[Bindable] private var thick_icon:Class = images.whiteboard_thick;
			[Bindable] private var thin_icon:Class = images.whiteboard_thin;
			
			public var canvas:WhiteboardCanvas;
			private var presentationWindow:PresentationWindow;
			
			[Bindable] private var colorPickerColours:Array = ['0x000000', '0xFFFFFF' , '0xFF0000', '0xFF8800',
                '0xCCFF00', '0x00FF00', '0x00FF88', '0x00FFFF', 
                '0x0088FF', '0x0000FF', '0x8800FF', '0xFF00FF'];
			
			/**
			 * Sets the type of shape we're drawing (pencil, rectangle, etc...) 
			 * @param s The type
			 * 
			 */		
			protected function setShape(s:String):void{
				canvas.setShape(s);
				
				switch(s){
					case DrawObject.PENCIL:
						btnPenc.selected = true;
						btnEllipse.selected = false;
						btnRectangle.selected = false;
						break;
					case DrawObject.ELLIPSE:
						btnPenc.selected = false;
						btnEllipse.selected = true;
						btnRectangle.selected = false;
						break;
					case DrawObject.RECTANGLE:
						btnPenc.selected = false;
						btnEllipse.selected = false;
						btnRectangle.selected = true;
						break;
				}
			}
			
			private function setShapeToPencil(e:WhiteboardButtonEvent):void{
				this.setShape(DrawObject.PENCIL);
			}
			
			/**
			 * Sets the color 
			 * @param e event containing the color (e.target.selectedColor)
			 * 
			 */		
			protected function changeColor(e:Event):void{
				canvas.changeColor(e);
			}
			
			/**
			 * Sets the thickness 
			 * @param e event containing the thickness (e.target.value)
			 * 
			 */		
			protected function changeThickness(e:Event):void{
				canvas.changeThickness(e);
			}
			
			private function presenterMode(e:MadePresenterEvent):void{
				//this.visible = true;
			}
			
			private function viewerMode(e:MadePresenterEvent):void{
				//this.visible = false;
				
				//disableWhiteboard();
			}
			
			private function showToolbar(e:PresentationEvent):void{
				this.visible = true;
			}
			
			private function sendUndoCommand():void{
				if (!canvas.isPageEmpty()) dispatchEvent(new WhiteboardDrawEvent(WhiteboardDrawEvent.UNDO_SHAPE));
			}
			
			private function enableWhiteboard(event:WhiteboardButtonEvent = null):void{
				this.visible = true;
				/*var e:HighlighterPresenterEvent = new HighlighterPresenterEvent(HighlighterPresenterEvent.MODIFY_ENABLED);
				e.enabled = true;
				dispatchEvent(e);*/
			}
			
			private function disableWhiteboard(event:WhiteboardButtonEvent = null):void{
				this.visible = false;
				/*var e:HighlighterPresenterEvent = new HighlighterPresenterEvent(HighlighterPresenterEvent.MODIFY_ENABLED);
				e.enabled = false;
				dispatchEvent(e);*/
			}
			
			public function positionToolbar(window:PresentationWindow):void{
				presentationWindow = window;
				presentationWindow.addEventListener(MoveEvent.MOVE, setPositionAndDepth);
				presentationWindow.addEventListener(ResizeEvent.RESIZE, setPositionAndDepth);
				presentationWindow.addEventListener(MouseEvent.CLICK, setPositionAndDepth);
				this.x = presentationWindow.x + presentationWindow.width + 3;
				this.y = presentationWindow.y + 30;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			private function setPositionAndDepth(e:Event = null):void{
				this.x = presentationWindow.x + presentationWindow.width + 3;
				this.y = presentationWindow.y + 30;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			private function closeToolbar(e:StopWhiteboardModuleEvent):void{
				parent.removeChild(this);
			}
			
		]]>
	</mx:Script>
	<mx:Button width="20" height="20" id="btnPenc" click="setShape(DrawObject.PENCIL)"  icon="{pencil_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.pencil')}" toggle="true" selected="true" />
	<mx:Button width="20" height="20" id="btnRectangle" click="setShape(DrawObject.RECTANGLE)" icon="{rectangle_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.rectangle')}" toggle="true" />
	<mx:Button width="20" height="20" id="btnEllipse" click="setShape(DrawObject.ELLIPSE)" icon="{ellipse_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.ellipse')}" toggle="true" />
	
	<mx:Spacer height="5" />
	<mx:Button width="20" height="20" id="btnClear" click="dispatchEvent(new WhiteboardDrawEvent(WhiteboardDrawEvent.CLEAR_BOARD))" icon="{delete_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.clear')}" />
	<mx:Button width="20" height="20" id="btnUndo"  click="sendUndoCommand()" icon="{undo_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.undo')}" />
	
	<mx:Spacer height="5" />
	<mx:ColorPicker change="changeColor(event)" id="cpik" swatchPanelStyleName="colorPickerStyle" dataProvider="{colorPickerColours}" selectedColor="0x000000" 
					toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.color')}"/>
	
	<mx:Spacer height="3" />
	<mx:Image source="{thick_icon}" horizontalAlign="center" width="20"/>
	<mx:VSlider height="50" id="sld" change="changeThickness(event)" toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.thickness')}" minimum="1" maximum="20" 
				useHandCursor="true" value="1" showDataTip="true" snapInterval="1" dataTipOffset="0" labelOffset="0" />
	<mx:Image source="{thin_icon}" horizontalAlign="center" width="20" />
	
</mx:VBox>
