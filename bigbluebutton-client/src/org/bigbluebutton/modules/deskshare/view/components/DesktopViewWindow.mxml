<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="600" height="400"
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	title="{ResourceUtil.getInstance().getString('bbb.desktopView.title')}" 
	showCloseButton="false"
	resize="fitToWindow()" >
	
	<mate:Listener type="{ViewStreamEvent.STOP}" method="onStopViewStreamEvent" />
	<mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent" />
		
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.sampler.NewObjectSample;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.api.IUserListener;
			import org.bigbluebutton.main.api.UserManager;
			import org.bigbluebutton.main.model.User;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.CursorEvent;
			import org.bigbluebutton.modules.deskshare.events.StartedViewingEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewWindowEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private var screenHeight:Number = Capabilities.screenResolutionY;
			private var screenWidth:Number = Capabilities.screenResolutionX;
						
			private var images:Images = new Images();
			[Bindable] public var fitToWidthIcon:Class = images.magnifier;
			[Bindable] public var fitToActualSizeIcon:Class = images.mag_reset;
			
			private var cursor:Shape;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			
			private static const VIDEO_WIDTH_PADDING:int = 7;
			private static const VIDEO_HEIGHT_PADDING:int = 65;

			// The following code block is to deal with a bug in FLexLib 
			// with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			
			// Timer to make sure the video fits to window whenever the window is resized.
			private var fitToWindowTimer:Timer;
			
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;    
					dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));            	
                	isMaximized = true;
                	windowControls.maximizeRestoreBtn.toolTip = "Restore to previous size";
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					windowControls.maximizeRestoreBtn.toolTip = "Maximize this window";
				}		
				/*
				 * Need to have a timer to trigger resizing video to window after the 
				 * window has been maximized/restored. The MAXIMIZE/RESTORE events are
				 * generated when the button is clicked so the width and height are not
				 * the ones we want.
				 */
				fitToWindowTimer = new Timer(100);
				fitToWindowTimer.addEventListener(TimerEvent.TIMER, maximizeTimerHandler);
				fitToWindowTimer.start();		
			}
			
			private function maximizeTimerHandler(event:TimerEvent):void {				
				fitToWindow();
				fitToWindowTimer.stop();
			}
						
			private function onCreationComplete():void{
				windowControls.maximizeRestoreBtn.toolTip = "Maximize this window";
				windowControls.minimizeBtn.toolTip = "Minimize this window";
				
				videoHolder.addChild(video);
				
				this.addChild(videoHolder);
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				this.width = 600;
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);				
				fitToActualSize();
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				videoHolder.addChild(cursor);
				videoHolder.addChild(cursorImg);
				cursor.visible = false;
			}
			
			private function onResizeEndEvent(event:MDIWindowEvent):void {
				if (event.window == this) {
					fitToWindow();
				}
			}
			
			private function onUpdateCursorEvent(event:CursorEvent):void {	
				cursor.x = ((event.x/videoWidth)) * videoHolder.width;
				cursor.y = ((event.y/videoHeight)) * videoHolder.height;
//				cursor.visible = true;
				
				cursorImg.visible = true;
                // DO NOT compute the x and y coordinate and assign directly to the cursorImg
                // as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
                if (cursor.x < videoHolder.x) cursor.x = videoHolder.x;
                if (cursor.y < videoHolder.y) cursor.y = videoHolder.y;
                if (cursor.x > videoHolder.x + videoHolder.width) cursor.x = videoHolder.x + videoHolder.width;
                if (cursor.y > videoHolder.y + videoHolder.height) cursor.y = videoHolder.y + videoHolder.height;
                cursorImg.x = cursor.x;
                cursorImg.y = cursor.y;
			}
			
			public function startVideo(connection:NetConnection, stream:String, width:Number, height:Number):void{
				this.videoWidth = width;
				this.videoHeight = height;
				
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				video = new Video(width, height);
				video.width = width;
				video.height = height;
				video.attachNetStream(ns);
				ns.play(stream);	
				this.stream = stream;
				this.title = "Blah";
		//		this.title = UserManager.getInstance().getPresenter().name + " is sharing their desktop with you";
			}
			
			public function stopViewing():void {
				ns.close();
				closeWindow();				
			}
			
			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				stopViewing();
			}
						
			private function onAsyncError(e:AsyncErrorEvent):void{
				LogUtil.debug("VIdeoWindow::asyncerror " + e.toString());
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
				case "NetStream.Play.Start":
					LogUtil.debug("NetStream.Publish.Start for broadcast stream " + stream);
									LogUtil.debug("Dispatching start viewing event");
				var dispatcher: Dispatcher  = new Dispatcher();
				dispatcher.dispatchEvent(new StartedViewingEvent(StartedViewingEvent.STARTED_VIEWING_EVENT));
					break;
				case "NetStream.Play.UnpublishNotify":
					LogUtil.debug("NetStream.Play.UnpublishNotify for broadcast stream " + stream);
					stopViewing();
					break;
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}
												
			/**
			 * resizes the desktop sharing video to fit to this window
			 */
			private function fitToWindow():void{
				if (videoIsSmallerThanWindow()) {
					fitWindowToVideo();
				}
				
				// Ignore if we are displaying the actual size of the video
				if (! btnActualSize.selected) {
					fitVideoToWindow();
				}
			}
			
			private function fitVideoToWindow():void {
				if (this.width < this.height) {
					fitToWidthAndAdjustHeightToMaintainAspectRatio();				
				} else {
					fitToHeightAndAdjustWidthToMaintainAspectRatio();
				}				
			}
						
			private function fitWindowToVideo():void {	
				video.width = videoWidth;
				videoHolder.width = videoWidth;
				video.height = videoHeight;
				videoHolder.height = videoHeight;			
				this.height = videoHeight + VIDEO_HEIGHT_PADDING;
				this.width = videoWidth + VIDEO_WIDTH_PADDING;
			}
			
			private function videoIsSmallerThanWindow():Boolean {
				return (videoHeight < this.height) && (videoWidth < this.width);
			}
			
		
			private function fitToWidthAndAdjustHeightToMaintainAspectRatio():void {
					video.width = this.width - VIDEO_WIDTH_PADDING;
					videoHolder.width = video.width;
					// Maintain aspect-ratio
					video.height = (videoHeight * video.width) / videoWidth;
					videoHolder.height = video.height;
					this.height = video.height + VIDEO_HEIGHT_PADDING;					
			}
				
			private function fitToHeightAndAdjustWidthToMaintainAspectRatio():void {
					video.height = this.height - VIDEO_HEIGHT_PADDING;
					videoHolder.height = video.height;
					// Maintain aspect-ratio
					video.width = (videoWidth * video.height) / videoHeight;
					videoHolder.width = video.width;
					this.width = video.width + VIDEO_WIDTH_PADDING;					
			}
								
			/**
			 * resizes the desktop sharing video to actual video resolution
			 */
			private function fitToActualSize():void{
				if (videoIsSmallerThanWindow()) {
					fitWindowToVideo();
				} else {
					video.width = videoWidth;
					videoHolder.width = videoWidth;
					video.height = videoHeight;
					videoHolder.height = videoHeight;					
				}
			}
			
			private function determineHowToDisplayVideo():void {
				if (btnActualSize.selected) {
					fitToActualSize();			
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow');	
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow');
				} else {
					fitToWindow();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.desktopView.actualSize');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.desktopView.actualSize');
				}
			}
			
			private function closeWindow():void {
				dispatchEvent(new ViewWindowEvent(ViewWindowEvent.CLOSE));
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.desktopView.title');
			}
			
		]]>
	</mx:Script>
	<mx:Move id="cursorMove" target="{cursorImg}"/>
	<mx:Image id="cursorImg" visible="false" source="@Embed('../../assets/images/cursor4.png')"/>
		
	<mx:ControlBar id="bottomBar" height="35" horizontalAlign="center">
		<mx:Button id="btnActualSize" toggle="true" click="determineHowToDisplayVideo()" selected="false"
			height="90%" label="{btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.desktopView.actualSize')}" 
			toolTip="{ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow')}" />
	</mx:ControlBar>
</MDIWindow>
