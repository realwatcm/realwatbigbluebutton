<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:flexmdi="flexlib.mdi.containers.*"
		xmlns:logModule="org.bigbluebutton.modules.log.view.components.*"
		xmlns:views="org.bigbluebutton.main.views.*"
		xmlns:mate="http://mate.asfusion.com/"
		xmlns:maps="org.bigbluebutton.main.maps.*"
		xmlns:api="org.bigbluebutton.main.api.*"
		width="100%" height="100%"
		creationComplete="initializeShell()">
		
	<mate:Listener type="{ConfigEvent.CONFIG_EVENT}" method="setLogVisibility" />
	<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />	
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="handleCloseWindowEvent"/>
	<mate:Listener type="{AddUIComponentToMainCanvas.ADD_COMPONENT}" method="addComponentToCanvas" />
	<mate:Listener type="{AppVersionEvent.APP_VERSION_EVENT}" method="handleApplicationVersionEvent" />	
	<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="handleLogout" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_FAILED}" method="attemptReconnect" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.UNKNOWN_REASON}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_REJECTED}" method="attemptReconnect"  />

	<api:APIEventMap />
	
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.main.events.AppVersionEvent;
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.MouseEvent;
			
			import flexlib.mdi.containers.MDIWindow;
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.AddUIComponentToMainCanvas;
			import org.bigbluebutton.main.events.CloseWindowEvent;
			import org.bigbluebutton.main.events.ConfigEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.main.events.OpenWindowEvent;
			import org.bigbluebutton.main.events.PortTestEvent;
			import org.bigbluebutton.main.events.SuccessfulLoginEvent;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.util.logging.Logger;
			
			private var globalDispatcher:Dispatcher;
			
			private var dispState:String; //full-screen?
			private var images:Images = new Images();
			private var stoppedModules:ArrayCollection;
			
			private var logs:Logger = new Logger();
			private var logWindow:LogWindow;
			
			private var logoutWindow:LoggedOutWindow;
			private var connectionLostWindow:ConnectionLostWindow;
			
			// LIVE or PLAYBACK
			private var _mode:String = 'LIVE';
			[Bindable] public var appVersion:String = '0.7';
			private var localeVersion:String = 'old';
			[Bindable] public var numberOfModules:int = 0;
			
			[Bindable] private var fullscreen_icon:Class = images.full_screen;
			[Bindable] private var logs_icon:Class = images.table;
			[Bindable] private var reset_layout_icon:Class = images.layout;
			
			public function get mode():String {
				return _mode;
			}
			
			protected function initializeShell():void {		
				trace('Initializing');	
				globalDispatcher = new Dispatcher();
			}

			protected function initFullScreen():void {				
				/* Set up full screen handler. */
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = stage.displayState;
			}					
			
			private function handleApplicationVersionEvent(event:AppVersionEvent):void {
				appVersion = event.appVersion;
				localeVersion = event.localVersion;
				checkLocaleVersion(localeVersion);
			}
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
				dispState = stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					LogUtil.debug("Switching to full screen");
					/* Do something specific here if we switched to full screen mode. */
				
				} else {
					LogUtil.debug("Switching to normal screen");
					/* Do something specific here if we switched to normal mode. */
				}
			}			
			
			private function openLogWindow():void {
				if (logWindow == null){
					logWindow = new LogWindow();
					logWindow.logs = logs;
				}
				mdiCanvas.windowManager.add(logWindow);
				mdiCanvas.windowManager.absPos(logWindow, 50, 50);
				logWindow.width = mdiCanvas.width - 100;
				logWindow.height = mdiCanvas.height - 100;
			}
			
			private function toggleFullScreen():void{
	   			LogUtil.debug("Toggling fullscreen");
	   			try {
					switch (stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							LogUtil.debug("full screen mode");
							// If already in full screen mode, switch to normal mode.
							stage.displayState = StageDisplayState.NORMAL;
							break;
						default:
							LogUtil.debug("Normal screen mode");
							// If not in full screen mode, switch to full screen mode.
							stage.displayState = StageDisplayState.FULL_SCREEN;
							break;
					}
				} catch (err:SecurityError) {
					// ignore
				}
	   		}	
	   		
	   		private function handleOpenWindowEvent(event:OpenWindowEvent):void {
	   			
	   			var window:IBbbModuleWindow = event.window;
	   			mdiCanvas.addWindow(window);
	   		}
	   		
	   		private function handleCloseWindowEvent(event:CloseWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
				mdiCanvas.removeWindow(window);
	   		}
	   		
	   		private function resetLayout():void{
	   			mdiCanvas.resetWindowLayout();
	   		}
	   		
	   		private function addComponentToCanvas(e:AddUIComponentToMainCanvas):void{
	   			mdiCanvas.addChild(e.component);
	   		}
	   		
	   		public function checkLocaleVersion(localeVersion:String):void {	   			
	   			Alert.okLabel ="OK";
				var version:String = "old-locales";
				version = ResourceUtil.getInstance().getString('bbb.mainshell.locale.version');
				LogUtil.debug("Locale from config=" + localeVersion + ", from locale file=" + version);

				if ((version == "old-locales") || (version == "") || (version == null)) {
					wrongLocaleVersion();
				} else {
					if (version != localeVersion) wrongLocaleVersion();
				}	   			
	   		}
	   		
	   		private function wrongLocaleVersion():void {
				var localeWindow:OldLocaleWarnWindow = OldLocaleWarnWindow(PopUpManager.createPopUp(mdiCanvas, OldLocaleWarnWindow, false));

				var point1:Point = new Point();
	        	// Calculate position of TitleWindow in Application's coordinates. 
	        	point1.x = 400;
	        	point1.y = 300;                
	        	point1 = mdiCanvas.localToGlobal(point1);
				localeWindow.x = point1.x + 25;
				localeWindow.y = point1.y + 25;	
            }
			
			private function handleLogout(e:ConnectionFailedEvent):void{
				if (logoutWindow != null) return;
				logoutWindow = LoggedOutWindow(PopUpManager.createPopUp( mdiCanvas, LoggedOutWindow, false));
				
				var point1:Point = new Point();
				// Calculate position of TitleWindow in Application's coordinates. 
				point1.x = 400;
				point1.y = 300;                
				point1 = localToGlobal(point1);
				logoutWindow.x = point1.x + 25;
				logoutWindow.y = point1.y + 25;	
				if (e is ConnectionFailedEvent) logoutWindow.setReason((e as ConnectionFailedEvent).type);
				else logoutWindow.setReason("You have logged out of the conference");
				
				mdiCanvas.removeAllWindows(); 
			}
			
			private function attemptReconnect(e:ConnectionFailedEvent):void{
				if (connectionLostWindow != null) return;
				connectionLostWindow = ConnectionLostWindow(PopUpManager.createPopUp( mdiCanvas, ConnectionLostWindow, true));
				connectionLostWindow.x = mdiCanvas.width/2 - connectionLostWindow.width/2;
				connectionLostWindow.y = mdiCanvas.height/2 - connectionLostWindow.height/2;
			}
			
			private function setLogVisibility(e:ConfigEvent):void{
				logBtn.visible = e.config.showDebug;
			}
			
		]]>
	</mx:Script>
			
	<views:MainToolbar id="toolbar" dock="true" width="100%" height="30" visible="false" verticalAlign="middle"/>
	<views:MainCanvas id="mdiCanvas" horizontalScrollPolicy="off" verticalScrollPolicy="off" effectsLib="{flexlib.mdi.effects.effectsLib.MDIVistaEffects}" width="100%" height="100%">
		<views:LoadingBar id="progressBar" x="{this.width/2 - progressBar.width/2}" y="{this.height/2 - progressBar.height/2}" width="{this.width/2}" />
	</views:MainCanvas>	
	<mx:ControlBar width="100%" height="20" paddingTop="0">		
	  	<mx:Label text="{ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion])}" id="copyrightLabel2"/>
	 	<mx:Spacer width="20"/>
		<mx:Spacer width="100%"/> 
		<mx:Button width="20" height="20" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.logBtn.toolTip')}" id="logBtn" icon="{logs_icon}" click="openLogWindow()" />
		<mx:Button width="20" height="20" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.resetLayoutBtn.toolTip')}" id="btnResetLayout" icon="{reset_layout_icon}" click="resetLayout()" />
	</mx:ControlBar>
</mx:VBox>
