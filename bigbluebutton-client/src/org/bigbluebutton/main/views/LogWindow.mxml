<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       title="Log Window" creationComplete="displayLogMessages();"
	       showCloseButton="true" xmlns:text="flash.text.*">

	<mx:Script>
		<![CDATA[
			import mx.controls.TextArea;
			import flexlib.controls.Highlighter;
			import org.bigbluebutton.util.logging.Logger;
			import mx.logging.Log;
			import mx.logging.LogEventLevel;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var logs:Logger;
			private var highlighter:Highlighter;
			private var textField:TextField;
			
			private function changeTarget():void {
				if (!chkFlag.selected) {
					logs.enableLogging(true)
				} else {
					logs.enableLogging(false)
				}
			}
			
			private function displayLogMessages():void {
				this.textField = this.getTextField(this.txtOutput);
				highlighter = new Highlighter(this.textField);
				txtOutput.text = logs.messages
			}
			
			private function filter():void{
				this.highlighter.reset();
				this.highlighter.highlightWordInstances(idFilter.text, false);
			}
			
			public function getTextField(component:TextArea):TextField{
                var len:int = component.numChildren;
                var r:TextField;
                for(var i:int=0; i<len; i++){
                    var thisChild:DisplayObject = component.getChildAt(i);
                    if(thisChild is TextField){
                        r = thisChild as TextField;
                    }
                }
                return r;
            }
			
			
		]]>
	</mx:Script>
	<mx:TextArea id="txtOutput" text="" updateComplete="txtOutput.verticalScrollPosition = txtOutput.maxVerticalScrollPosition + 1;"
		width="100%" height="100%"/>
	<mx:ApplicationControlBar id="chatCtrlBar" width="100%" height="10%">		
		<mx:HBox>
		<mx:Label text="Highlight:" />
		<mx:TextInput id="idFilter" change="filter()"/>
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="Turn Logging Off"/>
		<mx:CheckBox id="chkFlag" selected="false" change="changeTarget()"/>
		<mx:Button label="Clear" click="txtOutput.text = ''"/>
		<mx:Button label="Refresh" click="displayLogMessages()"/>
	</mx:HBox>			    
	</mx:ApplicationControlBar>
</MDIWindow>
